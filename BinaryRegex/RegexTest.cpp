// RegexTest.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include <regex>
#include <string>
#include "regbinary.h"


// 테스트 바이너리 셋
char test_set[] = {
	0xAA, 0x41, 0x83, 0x0F, 0x02, 0x45, 0x33, 0xC0, 0x66, 0x45, 0x39, 0x04, 0x24, 0x75, 0x14, 0x33,
	0xC0, 0x49, 0x89, 0x45, NULL, 0x49, 0x89, 0x45, 0x08, 0x48, 0x8B, 0x43, 0x10, 0x49, 0x89, 0x45,
	0x00, 0xEB, 0x1D, 0x44, 0x38, 0x43, 0x20, 0x75, 0x06, 0x44, 0x38, 0x43, 0x21, 0x75, 0x1D, 0x4D,
	0x8B, 0xC5, 0x48, 0x8B, 0xD3, 0x33, 0xC9, 0xFF, 0x15, 0x6B, 0x59, 0x00, 0x00, 0x45, 0x33, 0xC0,
	0x44, 0x38, 0x43, 0x21, 0x75, 0x06, 0x44, '\n', 0x43, 0x20, 0x75, 0x32, 0x48, 0x8B, 0x4D, 0xBF,
	0x48, 0x8B, 0x43, 0x10, 0x48, 0x89, 0x01, 0xEB, 0x25, 0x41, 0x83, 0x0F, 0x08, 0xEB, 0x1F, 0x41,
	0xBE, 0x10, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x56, 0x50, 0x45, 0x8B, 0xC6, 0x48, 0x8B, 0xCB, 0xFF,
	0x15, 0xD3, 0x1B, 0x00, 0x00, 0x49, 0x3B, 0xC6, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xB8, 0x01,
	0x00, 0x00, 0x00, 0x48, 0x8B, 0x4D, 0xFF, 0x48, 0x33, 0xCC, 0xE8, 0x11, 0x11, 0x00, 0x00, 0x48,
	0x8B, 0x9C, 0x24, 0x00, 0x01, 0x00, 0x00, 0x48, 0x81, 0xC4, 0xC0, 0x00, 0x00, 0x00, 0x41, 0x5F,
	0x41, 0x5E, 0x41, 0x5D, 0x41, 0x5C, 0x5F, 0x5E, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0x48, 0x85, 0xC9, 0x75, 0x04, 0x83, 0xC8, 0xFF, 0xC3, 0x48, 0x8B, 0x51, 0x18, 0x8B, 0x49, 0x10,
	0xE9, 0x0B, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0x48, 0x83, 0xEC, 0x38, 0x44, 0x8B, 0xC1, 0x48, 0x85, 0xD2, 0x74, 0x61, 0x83, 0xF9, 0x04, 0x76,
	0x5C, 0x8B, 0x02, 0x85, 0xC0, 0x74, 0x79, 0x83, 0xF8, 0x02, 0x74, 0x6D, 0x83, 0xF8, 0x04, 0x74,
	0x63, 0x3D, 0x01, 0x00, 0xFF, 0xFF, 0x74, 0x57, 0x3D, 0x02, 0x00, 0xFF, 0xFF, 0x74, 0x4B, 0x83,
	0xF8, 0xFE, 0x74, 0x41, 0x48, 0x8B, 0x0D, 0x85, 0x38, 0x00, 0x00, 0x48, 0x8D, 0x15, 0x7E, 0x38,
	0x50, 0x19, 0xD6, 0x66, 0x85, 0x83, 0xFF, 0xFF, 0x70, 0x8D, 0x35, 0x65, 0x85, 0x83, 0xFF, 0xFF,
	0x01, 0x18, 0x29, 0x65, 0x85, 0x83, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0A, 0x00, 0x87, 0x02, 0x50, 0x72, 0x6F, 0x63, 0x00, 0xC4, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00,
	0x00, 0x10, 0x00, 0x00, 0xD8, 0x07, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0xE0, 0x34, 0x66, 0x85, 0x83, 0xFF, 0xFF, 0x00, 0x54, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x5C, 0x7F, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x88, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x40, 0xE0, 0x34, 0x66, 0x85, 0x83, 0xFF, 0xFF, 0x23, 0x6D, 0x87, 0x6A, 0x81, 0x9C, 0xFF, 0xFF,
	0x03, 0x00, 0xB6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x18, 0x29, 0x65, 0x85, 0x83, 0xFF, 0xFF,
	0x08, 0x18, 0x29, 0x65, 0x85, 0x83, 0xFF, 0xFF, 0x18, 0x18, 0x29, 0x65, 0x85, 0x83, 0xFF, 0xFF,
	0x18, 0x18, 0x29, 0x65, 0x85, 0x83, 0xFF, 0xFF, 0x00, 0x80, 0x70, 0x31, 0x00, 0x00, 0x00, 0x00,
	0x78, 0x33, 0xAB, 0x66, 0x85, 0x83, 0xFF, 0xFF, 0xF8, 0x67, 0x47, 0x66, 0x85, 0x83, 0xFF, 0xFF,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0x29, 0x65, 0x85, 0x83, 0xFF, 0xFF,
	0xF8, 0x18, 0x29, 0x65, 0x85, 0x83, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x14, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x08, 0x06, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x40, 0x7A, 0xF7, 0x63, 0x85, 0x83, 0xFF, 0xFF, 0x40, 0xFA, 0xF7, 0x63, 0x85, 0x83, 0xFF, 0xFF,
	0x6A, 0x67, 0xA8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xB0, 0x1A, 0x29, 0x65, 0x85, 0x83, 0xFF, 0xFF, 0xB0, 0x1A, 0x29, 0x65, 0x85, 0x83, 0xFF, 0xFF,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xF0, 0x7A, 0xF7, 0x63, 0x85, 0x83, 0xFF, 0xFF, 0xF0, 0xD9, 0xF3, 0x63, 0x85, 0x83, 0xFF, 0xFF,
	0x00, 0xD0, 0x00, 0x02, 0x51, 0x0C, 0x4D, 0x14, 0x41, 0x6D, 0x4C, 0x13, 0x58, 0x87, 0xD2, 0x01,
	0x98, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x62, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x20, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB8, 0x63, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x04, 0x00, 0x02, 0x00, 0x00,
	0x40, 0x7B, 0xF7, 0x63, 0x85, 0x83, 0xFF, 0xFF, 0x40, 0xDA, 0xF3, 0x63, 0x85, 0x83, 0xFF, 0xFF,
	0xB0, 0xFB, 0xDF, 0x65, 0x85, 0x83, 0xFF, 0xFF, 0xA7, 0x39, 0x51, 0x6A, 0x81, 0x9C, 0xFF, 0xFF,
	0x58, 0x16, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x7C, 0x06, 0xC0, 0x0F, 0xD8, 0xFF, 0xFF,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x1A, 0x6A, 0x81, 0x9C, 0xFF, 0xFF,
	0x00, 0x00, 0xDA, 0x06, 0xF7, 0x7F, 0x00, 0x00, 0x96, 0x2D, 0xFD, 0x19, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x3C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x3E, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x98, 0x29, 0x26, 0x00, 0x00, 0x00,
	0x00, 0xE0, 0xF0, 0x35, 0x80, 0xDC, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0xE0, 0x34, 0x66, 0x85, 0x83, 0xFF, 0xFF, 0x40, 0xE0, 0x49, 0x6A, 0x81, 0x9C, 0xFF, 0xFF,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x30, 0x18, 0x22, 0x6A, 0x81, 0x9C, 0xFF, 0xFF, 0xF0, 0xA0, 0xF7, 0x63, 0x85, 0x83, 0xFF, 0xFF,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xDC, 0x75, 0x66, 0x85, 0x83, 0xFF, 0xFF,
	0x63, 0x6F, 0x6E, 0x68, 0x6F, 0x73, 0x74, 0x2E, 0x65, 0x78, 0x65, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x9D, 0xFE, 0x63, 0x85, 0x83, 0xFF, 0xFF,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x18, 0x37, 0xAB, 0x66, 0x85, 0x83, 0xFF, 0xFF,
	0x98, 0x6B, 0x47, 0x66, 0x85, 0x83, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00, 0x7E, 0x9D, 0x3E, 0x1F,
	0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x7C, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xC5, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xFE, 0xB2, 0x2D, 0x1B, 0x12, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

int main()
{
	// 정규표현식 기초 : https://wikidocs.net/4308

	//
	// 기존 REGEX 사용
	//
	printf("How to use std::regex, std::regex_match, std::regex_search\n");
	// Ref : http://en.cppreference.com/w/cpp/regex/regex_match

	// Simple regular expression matching
	char text_1[] = "afoseiaffoosdfofoo.txt";
	std::regex txt_regex("[a-z]+[.]txt"); // same as "[a-z]+\\.txt"
	std::cout << text_1 << " is " << (std::regex_match(text_1, txt_regex) ? "matched" : "unmatched") << '\n';

	// Extraction of a sub-match (grouping, ref : http://www.nextree.co.kr/p4327/)
	std::regex base_regex("([a-z]+)\\.txt");
	std::cmatch base_match;
	if (std::regex_match(text_1, base_match, base_regex)) {
		// The first sub_match is the whole string; the next
		// sub_match is the first parenthesized expression.
		if (base_match.size() == 2) {
			std::csub_match base_sub_match = base_match[1];
			std::string base = base_sub_match.str();
			std::cout << text_1 << " has a base of " << base << '\n';
		}
	}

	// Extraction of several sub-matches
	std::regex pieces_regex("([a-z]+)\\.([a-z]+)");
	std::cmatch pieces_match;
	if (std::regex_match(text_1, pieces_match, pieces_regex)) {
		for (size_t i = 0; i < pieces_match.size(); ++i) {
			std::csub_match sub_match = pieces_match[i];
			std::string piece = sub_match.str();
			std::cout << "submatch " << i << ": " << piece << '\n';
		}
	}
	
	// Search, ref : http://en.cppreference.com/w/cpp/regex/regex_search
	const char* window = text_1;
	std::regex search_regex("foo");
	std::cmatch search_match;
	while (regex_search(window, search_match, search_regex))
	{
		printf("%s found : %s (Left string : %s)\n", search_match.str().c_str(), search_match[0].first, search_match[0].second);
		// afoseiaffoosdfofoo
		// --------└ search_match.prefix
		// search_match.sufix : 남은 길이...
		window = search_match[0].second;
	}



	//
	//	기존 REGEX 문제점
	//
	printf("\n\nShow basic regex can not search after null character\n");

	// 아래의 시그너처는 버퍼에서 0x10에 위치한다.
	// 0x00 전에 있다.
	std::regex txt_regex1("[^]*\xC0\x49\x89\x45\[^]*"); // same as "[a-z]+\\.txt"
	std::cout << "Before null character : " << (std::regex_match(test_set, txt_regex1) ? "matched" : "unmatched") << '\n';

	// 아래의 시그너처는 버퍼에서 0x18에 위치한다.
	// 0x00 후에 있다.
	std::regex txt_regex2("[^]*\x45\x08\x48\[^]*"); // same as "[a-z]+\\.txt"
	std::cout << "After null character : " << (std::regex_match(test_set, txt_regex2) ? "matched" : "unmatched") << '\n';



	//
	// 바이너리용 정규 표현식 사용
	//
	printf("\n\nHow to use regex_bmatch, regex_bsearch\n");

	// [^] : NULL(0x00)을 포함한 모든 문자를 탐색
	// \x50\x72\x6f\x63 : EPROCESS PoolTag on Win10
	// 만약 정규표현식에 \x00이 포함되어 있다면 문자열 길이를 직접 입력해야 한다.
	std::regex bin_regex("[^]*\x50\x72\x6f\x63\[^]*");
	std::cout << "Signature is " << (regex_bmatch(test_set, _countof(test_set), bin_regex) ? "founded" : "unfounded") << '\n';

	std::cmatch bin_result;
	std::regex bin_group_regex("[^]*(\x50\x72\x6f\x63)\[^]*");
	if (regex_bmatch(test_set, _countof(test_set), bin_result, bin_group_regex)) {
		// The first sub_match is the whole string; the next
		// sub_match is the first parenthesized expression.
		for (size_t i = 1; i < bin_result.size(); i++) {
			std::csub_match sub_match = bin_result[i];
			// sub_match.first는 일치한 그룹 주소
			printf("Signature is found at %#x(rva : %#x)\n", sub_match.first, sub_match.first - test_set);
		}
	}

	const char* search_window = test_set;
	int buf_len = _countof(test_set);
	// \x03\x00\xb6\x00\x00\x00\x00\x00 : EPROCESS Dispatcher Header on Win10
	char bin_search_regex_txt[] = "\x03\x00\xb6\x00\x00\x00\x00\x00";
	// 정규표현식에 0x00이 포함되어 있기 때문에 문자열 길이를 직접 입력한다. (NULL 문자 주의)
	std::regex bin_search_regex(bin_search_regex_txt, _countof(bin_search_regex_txt) - 1);
	std::cmatch bsearch_result;
	while (regex_bsearch(search_window, buf_len, bsearch_result, bin_search_regex))
	{
		printf("Signature is found at %#x(rva : %#x)\n", bsearch_result[0].first, bsearch_result.prefix().length());

		search_window = bsearch_result[0].second;
		buf_len = bsearch_result.suffix().length();
	}
	

	// Find target process structure
	search_window = test_set;
	buf_len = _countof(test_set);
	// \x03\x00\xb6\x00\x00\x00\x00\x00 : EPROCESS Dispatcher Header on Win10
	// +0x450 ImageFileName : [15] UChar & 1100 : 0x44c
	// Is it can hex value?
	char target_regex_txt[] = "\x03\x00\xb6\x00\[^]{1100}conhost.exe";
	// 정규표현식에 0x00이 포함되어 있기 때문에 문자열 길이를 직접 입력한다. (NULL 문자 주의)
	std::regex target_regex(target_regex_txt, _countof(target_regex_txt) - 1);
	std::cmatch target_result;
	while (regex_bsearch(search_window, buf_len, target_result, target_regex))
	{
		printf("Signature is found at %#x(rva : %#x)\n", target_result[0].first, target_result.prefix().length());

		search_window = target_result[0].second;
		buf_len = target_result.suffix().length();
	}

	// Etcs...
	// https://developer.gnome.org/glib/stable/glib-regex-syntax.html
	// pcre는 null이 포함된 버퍼를 탐색할 수 있다?
	// http://stackoverflow.com/questions/2581037/can-pcre-regex-match-a-null-character

	return 0;
}

